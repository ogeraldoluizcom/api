name: CI/CD Pipeline
run-name: Pipeline CI/CD executed by ${{ github.actor }} in ${{ github.run_number }}

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Environment name'
        required: true
        type: string
      environment-url:
        description: 'Environment URL'
        required: true
        type: string
      K8S_NAMESPACE:
        description: 'Kubernetes Namespace'
        required: true
        type: string

jobs:
  deploy:
    name: Deploy in Kubernetes
    runs-on: ubuntu-latest

    # Environment Variables
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

        # Set Context
      - name: Apply Kubernetes Context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_KUBECONFIG }}

      - name: Update Deployment
        run: |
          # Find the appropriate environment file based on input
          ENV_FILE="k8s/${{ inputs.environment-name }}-k8s.yaml"

          # Update namespace in all relevant files
          sed -i 's|namespace: development|namespace: ${{ inputs.K8S_NAMESPACE }}|g' $ENV_FILE

          # Update host in ingress files
          sed -i 's|host: api.development.ogeraldoluiz.com|host: ${{ inputs.environment-url }}|g' $ENV_FILE

      - name: Create Namespace if Not Exists
        run: |
          kubectl get namespace ${{ inputs.K8S_NAMESPACE }} || kubectl create namespace ${{ inputs.K8S_NAMESPACE }}

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v5
        with:
          namespace: ${{ inputs.K8S_NAMESPACE }}
          manifests: |
            k8s/${{ inputs.environment-name }}-k8s.yaml

          images: geraldobl58/api:v${{ github.run_number }}

      - name: Run Database Migrations
        timeout-minutes: 15
        run: |
          # Configura√ß√µes iniciais
          MIGRATION_POD_NAME="prisma-migrate-${{ github.run_number }}"
          NAMESPACE="${{ inputs.K8S_NAMESPACE }}"
          TIMEOUT_SECONDS=600  # 10 minutos
          RETRY_INTERVAL=5

          # 1. Verifica√ß√£o do servi√ßo PostgreSQL
          echo "‚åõ Waiting for postgres service to be ready..."
          for i in {1..30}; do
            if kubectl get svc -n $NAMESPACE postgres-service &>/dev/null; then
              echo "‚úÖ Postgres service found"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Postgres service not found after 30 attempts"
              kubectl get svc -n $NAMESPACE
              exit 1
            fi
            echo "‚è≥ Waiting for postgres service... attempt $i/30"
            sleep $RETRY_INTERVAL
          done

          # 2. Teste de conex√£o com o banco de dados
          echo "üîå Testing database connection..."
          for i in {1..10}; do
            if kubectl run db-connection-test --rm -i --restart=Never --image=postgres:14 \
              --env="PGPASSWORD=docker" \
              --command -- psql -h postgres-service.$NAMESPACE.svc.cluster.local -U docker -d api -c "SELECT 1" &>/dev/null; then
              echo "‚úÖ Database connection successful"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå Failed to connect to database after 10 attempts"
              kubectl get pods -n $NAMESPACE
              kubectl describe svc -n $NAMESPACE postgres-service
              exit 1
            fi
            echo "‚è≥ Connection attempt $i/10 failed, retrying in $RETRY_INTERVAL seconds..."
            sleep $RETRY_INTERVAL
          done

          # 3. Resolve erro de migra√ß√£o pendente (se necess√°rio)
          echo "üõ†Ô∏è Checking for stuck migrations..."
          kubectl apply -n $NAMESPACE -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: prisma-migrate-resolve
            labels:
              app: prisma-migrate
          spec:
            backoffLimit: 0
            template:
              spec:
                containers:
                - name: migrator
                  image: geraldobl58/api:v${{ github.run_number }}
                  command: ["sh", "-c"]
                  args:
                    - |
                      echo "üîß Resolving migration 20250605223706_inint as applied..."
                      NODE_OPTIONS='--max-old-space-size=2048' npx prisma migrate resolve --applied 20250605223706_inint
                  env:
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: db-credentials
                        key: DATABASE_URL
                  resources:
                    limits:
                      memory: "2Gi"
                      cpu: "1"
                    requests:
                      memory: "1.5Gi"
                      cpu: "500m"
                restartPolicy: Never
          EOF

          # Espera job terminar
          if ! kubectl wait --for=condition=complete -n $NAMESPACE job/prisma-migrate-resolve --timeout=60s; then
            echo "‚ùå Failed to resolve migration"
            kubectl logs -n $NAMESPACE job/prisma-migrate-resolve
            exit 1
          fi

          # Limpa job de resolve
          kubectl delete job -n $NAMESPACE prisma-migrate-resolve

          # 4. Execu√ß√£o da migra√ß√£o
          echo "üöÄ Starting Prisma migration..."
          kubectl apply -n $NAMESPACE -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: $MIGRATION_POD_NAME
            labels:
              app: prisma-migrate
          spec:
            backoffLimit: 0  # N√£o tentar novamente em caso de falha
            template:
              spec:
                containers:
                - name: migrator
                  image: geraldobl58/api:v${{ github.run_number }}
                  command: ["sh", "-c"]
                  args: ["NODE_OPTIONS='--max-old-space-size=2048' npx prisma migrate deploy && npx prisma migrate status"]
                  env:
                    - name: DATABASE_URL
                      valueFrom:
                        secretKeyRef:
                          name: db-credentials
                          key: DATABASE_URL
                  resources:
                    limits:
                      memory: "2Gi"
                      cpu: "1"
                    requests:
                      memory: "1.5Gi"
                      cpu: "500m"
                restartPolicy: Never
          EOF

          # 5. Monitoramento da migra√ß√£o
          echo "‚è≥ Waiting for migration to complete (timeout: $TIMEOUT_SECONDS seconds)..."
          if ! kubectl wait --for=condition=complete -n $NAMESPACE job/$MIGRATION_POD_NAME --timeout=${TIMEOUT_SECONDS}s; then
            echo "‚ùå Migration failed or timed out"
            echo "üìÑ Migration logs:"
            kubectl logs -n $NAMESPACE -l job-name=$MIGRATION_POD_NAME --tail=100
            echo "üîç Job details:"
            kubectl describe job -n $NAMESPACE $MIGRATION_POD_NAME
            echo "üêû Pod details:"
            kubectl describe pod -n $NAMESPACE -l job-name=$MIGRATION_POD_NAME
            exit 1
          fi

          # 6. Verifica√ß√£o final e limpeza
          echo "‚úÖ Migration completed successfully"
          echo "üìÑ Final migration logs:"
          kubectl logs -n $NAMESPACE -l job-name=$MIGRATION_POD_NAME --tail=100

          # Limpeza do job
          kubectl delete job -n $NAMESPACE $MIGRATION_POD_NAME
