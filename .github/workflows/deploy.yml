name: CI/CD Pipeline
run-name: Pipeline CI/CD executed by ${{ github.actor }} in ${{ github.run_number }}

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Environment name'
        required: true
        type: string
      environment-url:
        description: 'Environment URL'
        required: true
        type: string
      K8S_NAMESPACE:
        description: 'Kubernetes Namespace'
        required: true
        type: string

jobs:
  deploy:
    name: Deploy in Kubernetes
    runs-on: ubuntu-latest

    # Environment Variables
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

        # Set Context
      - name: Apply Kubernetes Context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_KUBECONFIG }}

      - name: Update Deployment
        run: |
          # Find the appropriate environment file based on input
          ENV_FILE="k8s/${{ inputs.environment-name }}-k8s.yaml"

          # Update namespace in all relevant files
          sed -i 's|namespace: development|namespace: ${{ inputs.K8S_NAMESPACE }}|g' $ENV_FILE

          # Update host in ingress files
          sed -i 's|host: api.development.ogeraldoluiz.com|host: ${{ inputs.environment-url }}|g' $ENV_FILE

      - name: Create Namespace if Not Exists
        run: |
          kubectl get namespace ${{ inputs.K8S_NAMESPACE }} || kubectl create namespace ${{ inputs.K8S_NAMESPACE }}

      - name: Create Kubernetes Secret from GitHub Secrets
        run: |
          # Detecta o NODE_ENV com base no namespace
          case "${{ inputs.K8S_NAMESPACE }}" in
            production)
              NODE_ENV=production
              DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}
              ;;
            staging)
              NODE_ENV=staging
              DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}
              ;;
            development)
              NODE_ENV=development
              DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}
              ;;
            *)
              echo "Erro: namespace '${{ inputs.K8S_NAMESPACE }}' não suportado."
              exit 1
              ;;
          esac

          # Cria ou atualiza o Secret com as variáveis do GitHub Secrets
          kubectl create secret generic app-env-secret \
            --namespace=${{ inputs.K8S_NAMESPACE }} \
            --from-literal=NODE_ENV=$NODE_ENV \
            --from-literal=DATABASE_URL="$DATABASE_URL" \
            --from-literal=DO_SPACES_KEY='${{ secrets.DO_SPACES_KEY }}' \
            --from-literal=DO_SPACES_SECRET='${{ secrets.DO_SPACES_SECRET }}' \
            --from-literal=DO_SPACES_BUCKET='${{ secrets.DO_SPACES_BUCKET }}' \
            --from-literal=DO_SPACES_ENDPOINT='${{ secrets.DO_SPACES_ENDPOINT }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v5
        with:
          namespace: ${{ inputs.K8S_NAMESPACE }}
          manifests: |
            k8s/${{ inputs.environment-name }}-k8s.yaml

          images: geraldobl58/api:v${{ github.run_number }}

      # Run Prisma Migrate Job
      - name: Run Prisma Migrate Job
        run: |
          echo "Deletando Job anterior (se existir)..."
          kubectl delete job prisma-migrate -n ${{ inputs.K8S_NAMESPACE }} --ignore-not-found --wait=true || true

          echo "Aplicando novo Job com imagem correta..."
          export IMAGE_TAG=geraldobl58/api:v${{ github.run_number }}
          envsubst < k8s/${{ inputs.environment-name }}-migrate.yaml | kubectl apply -f -

          echo "Aguardando execução do Job de migrate..."
          kubectl wait --for=condition=complete job/prisma-migrate --timeout=90s -n ${{ inputs.K8S_NAMESPACE }}

      # Check if the Prisma Migrate Job was successful
      - name: Get Logs from Failed Prisma Migrate Job
        if: failure()
        run: |
          echo "Logs do Job:"
          kubectl logs job/prisma-migrate -n ${{ inputs.K8S_NAMESPACE }} || true
