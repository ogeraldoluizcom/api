name: CI/CD Pipeline
run-name: Pipeline CI/CD executed by ${{ github.actor }} in ${{ github.run_number }}

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Environment name'
        required: true
        type: string
      environment-url:
        description: 'Environment URL'
        required: true
        type: string
      K8S_NAMESPACE:
        description: 'Kubernetes Namespace'
        required: true
        type: string

jobs:
  deploy:
    name: Deploy in Kubernetes
    runs-on: ubuntu-latest

    # Environment Variables
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

        # Set Context
      - name: Apply Kubernetes Context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_KUBECONFIG }}

      - name: Update Deployment
        run: |
          # Find the appropriate environment file based on input
          ENV_FILE="k8s/${{ inputs.environment-name }}-k8s.yaml"

          # Update namespace in all relevant files
          sed -i 's|namespace: development|namespace: ${{ inputs.K8S_NAMESPACE }}|g' $ENV_FILE

          # Update host in ingress files
          sed -i 's|host: api.development.ogeraldoluiz.com|host: ${{ inputs.environment-url }}|g' $ENV_FILE

      - name: Create Namespace if Not Exists
        run: |
          kubectl get namespace ${{ inputs.K8S_NAMESPACE }} || kubectl create namespace ${{ inputs.K8S_NAMESPACE }}

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v5
        with:
          namespace: ${{ inputs.K8S_NAMESPACE }}
          manifests: |
            k8s/${{ inputs.environment-name }}-k8s.yaml

          images: geraldobl58/api:v${{ github.run_number }}

      # - name: Run Prisma Migrations in Pod
      #   run: |
      #     POD_NAME=$(kubectl get pods -n ${{ inputs.K8S_NAMESPACE }} -l app=api -o jsonpath="{.items[0].metadata.name}")
      #     kubectl exec -n ${{ inputs.K8S_NAMESPACE }} $POD_NAME -- npx prisma migrate deploy

      - name: Run Database Migrations
        timeout-minutes: 15
        run: |
          # Wait for postgres service to be available
          echo "Waiting for postgres service to be ready..."
          for i in {1..30}; do
            if kubectl get svc -n ${{ inputs.K8S_NAMESPACE }} postgres-service &>/dev/null; then
              echo "Postgres service found"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Postgres service not found after 30 attempts"
              exit 1
            fi
            echo "Waiting for postgres service... attempt $i"
            sleep 5
          done

          # Test database connection with retries
          echo "Testing database connection..."
          for i in {1..5}; do
            if kubectl run postgres-test --rm -i --restart=Never --image=postgres:14 \
              --env="PGPASSWORD=docker" \
              --command -- psql -h postgres-service.${{ inputs.K8S_NAMESPACE }}.svc.cluster.local -U docker -d api -c "SELECT 1"; then
              echo "Database connection successful"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Failed to connect to database after 5 attempts"
              exit 1
            fi
            echo "Connection attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
          
          kubectl apply -n ${{ inputs.K8S_NAMESPACE }} -f - <<EOF
          apiVersion: v1
          kind: Pod
          metadata:
            name: prisma-migrate-${{ github.run_number }}
            labels:
              app: prisma-migrate
          spec:
            containers:
            - name: migrator
              image: geraldobl58/api:v${{ github.run_number }}
              command: ["sh", "-c"]
              args: ["NODE_OPTIONS='--max-old-space-size=2048' npx prisma migrate deploy && npx prisma migrate status"]
              env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: db-credentials
                      key: DATABASE_URL
              resources:
                limits:
                  memory: "2Gi"
                  cpu: "1"
                requests:
                  memory: "1.5Gi"
                  cpu: "500m"
            restartPolicy: Never
          EOF

          # Aumentar timeout para 10 minutos (600s)
          kubectl wait --for=condition=Succeeded -n ${{ inputs.K8S_NAMESPACE }} pod/prisma-migrate-${{ github.run_number }} --timeout=600s
          
          # Mostrar logs completos
          kubectl logs -n ${{ inputs.K8S_NAMESPACE }} prisma-migrate-${{ github.run_number }} --tail=100
          
          if [[ "$(kubectl get pod -n ${{ inputs.K8S_NAMESPACE }} prisma-migrate-${{ github.run_number }} -o jsonpath='{.status.phase}')" != "Succeeded" ]]; then
            echo "Migration failed"
            kubectl describe pod -n ${{ inputs.K8S_NAMESPACE }} prisma-migrate-${{ github.run_number }}
            exit 1
          fi

          kubectl delete pod -n ${{ inputs.K8S_NAMESPACE }} prisma-migrate-${{ github.run_number }}