name: CI/CD Pipeline
run-name: Pipeline CI/CD executed by ${{ github.actor }} in ${{ github.run_number }}

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Environment name'
        required: true
        type: string
      environment-url:
        description: 'Environment URL'
        required: true
        type: string
      K8S_NAMESPACE:
        description: 'Kubernetes Namespace'
        required: true
        type: string

jobs:
  deploy:
    name: Deploy in Kubernetes
    runs-on: ubuntu-latest

    # Environment Variables
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

        # Set Context
      - name: Apply Kubernetes Context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_KUBECONFIG }}

      - name: Update Deployment
        run: |
          # Find the appropriate environment file based on input
          ENV_FILE="k8s/${{ inputs.environment-name }}-k8s.yaml"

          # Update namespace in all relevant files
          sed -i 's|namespace: development|namespace: ${{ inputs.K8S_NAMESPACE }}|g' $ENV_FILE

          # Update host in ingress files
          sed -i 's|host: api.development.ogeraldoluiz.com|host: ${{ inputs.environment-url }}|g' $ENV_FILE

      - name: Create Namespace if Not Exists
        run: |
          kubectl get namespace ${{ inputs.K8S_NAMESPACE }} || kubectl create namespace ${{ inputs.K8S_NAMESPACE }}

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v5
        with:
          namespace: ${{ inputs.K8S_NAMESPACE }}
          manifests: |
            k8s/${{ inputs.environment-name }}-k8s.yaml

          images: geraldobl58/api:v${{ github.run_number }}

      # - name: Run Prisma Migrations in Pod
      #   run: |
      #     POD_NAME=$(kubectl get pods -n ${{ inputs.K8S_NAMESPACE }} -l app=api -o jsonpath="{.items[0].metadata.name}")
      #     kubectl exec -n ${{ inputs.K8S_NAMESPACE }} $POD_NAME -- npx prisma migrate deploy

      - name: Run Prisma Migrations
        run: |
          # 1. Verifica se o pod está disponível
          echo "Verificando pods disponíveis..."
          kubectl get pods -n ${{ inputs.K8S_NAMESPACE }} -l app=api

          # 2. Aguarda o pod ficar pronto (com timeout de 5 minutos)
          echo "Aguardando o pod ficar pronto..."
          kubectl wait --namespace ${{ inputs.K8S_NAMESPACE }} \
            --for=condition=ready pod \
            --selector=app=api \
            --timeout=300s

          # 3. Obtém o nome do pod principal
          POD_NAME=$(kubectl get pods -n ${{ inputs.K8S_NAMESPACE }} -l app=api -o jsonpath="{.items[0].metadata.name}")
          echo "Pod encontrado: $POD_NAME"

          # 4. Verifica os containers no pod
          echo "Containers no pod:"
          kubectl get pod -n ${{ inputs.K8S_NAMESPACE }} $POD_NAME -o jsonpath='{.spec.containers[*].name}' | xargs -n1

          # 5. Executa as migrações com verificação de erro
          echo "Executando migrações do Prisma..."
          if ! kubectl exec -n ${{ inputs.K8S_NAMESPACE }} $POD_NAME \
            -c api \
            -- npx prisma migrate deploy; then
            
            echo "Falha nas migrações. Logs do pod:"
            kubectl logs -n ${{ inputs.K8S_NAMESPACE }} $POD_NAME -c api
            exit 1
          fi

          echo "Migrações executadas com sucesso!"
